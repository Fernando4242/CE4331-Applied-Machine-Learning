# -*- coding: utf-8 -*-
"""homework_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Io7oxOGE1QQe880TrQmueX20poPPv-u
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from google.colab import output

# Function to split data into train, validation, and test sets and print the percentage of each
def split_data_and_print_percentages(df, target_column, ratio_train=0.6, ratio_val=0.2, ratio_test=0.2):
    x = df.drop(target_column, axis=1)
    y = df[target_column]

    ratio_remaining = 1 - ratio_test
    ratio_val_adjusted = ratio_val / ratio_remaining

    x_remaining, x_test, y_remaining, y_test = train_test_split(x, y, test_size=ratio_test, random_state=42)
    x_train, x_val, y_train, y_val = train_test_split(x_remaining, y_remaining, test_size=ratio_val_adjusted, random_state=42)

    total_samples = len(df)
    train_samples = len(x_train)
    val_samples = len(x_val)
    test_samples = len(x_test)

    train_percentage = (train_samples / total_samples) * 100
    val_percentage = (val_samples / total_samples) * 100
    test_percentage = (test_samples / total_samples) * 100

    print(f"Train set: {train_percentage:.2f}% of total data")
    print(f"Validation set: {val_percentage:.2f}% of total data")
    print(f"Test set: {test_percentage:.2f}% of total data")

    return x_train, x_val, x_test, y_train, y_val, y_test

def train_model_for_target(df, target_column):
    # Remove limit on output
    output.no_vertical_scroll()

    # Splitting the dataset into training, validation, and test sets, and printing the percentage of each
    x_train, x_val, x_test, y_train, y_val, y_test = split_data_and_print_percentages(df, target_column)

    min_leaf_values = list(range(1, 25))
    accuracies = []
    clf_trainers = []

    print(f"\nTraining model for target column: {target_column}\n")
    for min_leaf in min_leaf_values:
        clf = DecisionTreeClassifier(min_samples_leaf=min_leaf)
        clf = clf.fit(x_train, y_train)
        y_val_pred = clf.predict(x_val)
        accuracy = metrics.accuracy_score(y_val, y_val_pred)
        accuracies.append(accuracy)
        clf_trainers.append(clf)
        print(f"Min Samples Leaf: {min_leaf}, Accuracy: {accuracy}")

    print(f"\nTraining complete for target column: {target_column}")

    # Plot the results
    plt.figure(figsize=(10, 6))
    plt.plot(min_leaf_values, accuracies, marker='o')
    plt.title(f'Validation Accuracy vs. Min Samples Leaf for {target_column}')
    plt.xlabel('Min Samples Leaf')
    plt.ylabel('Validation Accuracy')
    plt.grid(True)
    plt.show()

    best_min_leaf, accuracy, best_clf = find_best_min_leaf_clf(min_leaf_values, accuracies, clf_trainers)
    print(f"\nBest Min Samples Leaf for {best_min_leaf}, Accuracy: {accuracy}")

    validate_model_for_target_and_plot_confusion_matrix(best_clf, x_test, y_test)

def find_best_min_leaf_clf(min_leaf_values, accuracies, clf_trainers):
    best_index = np.argmax(accuracies)
    best_min_leaf = min_leaf_values[best_index]
    return best_min_leaf, accuracies[best_index], clf_trainers[best_index]

def validate_model_for_target_and_plot_confusion_matrix(clf, x_test, y_test):
    y_test_pred = clf.predict(x_test)
    test_accuracy = metrics.accuracy_score(y_test, y_test_pred)
    print(f"Test accuracy with best min_samples_leaf: {test_accuracy:.4f}")

    cm = confusion_matrix(y_test, y_test_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(cmap=plt.cm.Blues)
    plt.title("Confusion Matrix - Test Set")
    plt.show()

"""# Read and Encode Non-Numeric Fields for Training"""

# load dataset
df = pd.read_csv('heart.csv')

# Encode non-numeric fields
categorical_cols = df.select_dtypes(exclude=["number"]).columns
encoder = LabelEncoder()
for col in categorical_cols:
    df[col] = encoder.fit_transform(df[col])

df.head()

"""# Setup Training for HeartDisease Target


"""

train_model_for_target(df, 'HeartDisease')

"""# Setup Training for RestingECG Target"""

train_model_for_target(df, 'RestingECG')